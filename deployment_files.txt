# Procfile (for Railway/Heroku)
web: gunicorn wsgi:app

# runtime.txt (Python version)
python-3.11.0

# railway.json (Railway-specific config)
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}

# wsgi.py (WSGI entry point)
from app import app

if __name__ == "__main__":
    app.run()

# config.py (Configuration settings)
import os
from datetime import timedelta

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-key-change-in-production'
    
    # Database settings
    DATABASE_URL = os.environ.get('DATABASE_URL') or 'sqlite:///whois_cache.db'
    
    # Cache settings
    CACHE_TIMEOUT = int(os.environ.get('CACHE_TIMEOUT', 86400))  # 24 hours
    DNS_CACHE_TIMEOUT = int(os.environ.get('DNS_CACHE_TIMEOUT', 21600))  # 6 hours
    
    # Rate limiting
    RATE_LIMIT_PER_MINUTE = int(os.environ.get('RATE_LIMIT_PER_MINUTE', 60))
    BULK_ANALYSIS_LIMIT = int(os.environ.get('BULK_ANALYSIS_LIMIT', 10))
    
    # External API settings
    WHOIS_TIMEOUT = int(os.environ.get('WHOIS_TIMEOUT', 30))
    DNS_TIMEOUT = int(os.environ.get('DNS_TIMEOUT', 10))
    GEO_API_TIMEOUT = int(os.environ.get('GEO_API_TIMEOUT', 5))
    
    # Thread pool settings
    MAX_WORKERS = int(os.environ.get('MAX_WORKERS', 5))
    
    # Environment
    ENV = os.environ.get('FLASK_ENV', 'production')
    DEBUG = ENV == 'development'

class DevelopmentConfig(Config):
    DEBUG = True
    ENV = 'development'

class ProductionConfig(Config):
    DEBUG = False
    ENV = 'production'

config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': ProductionConfig
}

# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Flask
instance/
.webassets-cache

# Environment variables
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Database files
*.db
*.sqlite
*.sqlite3
database/
cache/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Temporary files
tmp/
temp/
exports/

# Updated requirements.txt (production-ready)
Flask==2.3.3
python-whois==0.8.0
dnspython==2.4.2
requests==2.31.0
geopy==2.3.0
gunicorn==21.2.0
python-dotenv==1.0.0
Flask-Limiter==3.5.0
Flask-Caching==2.1.0
Werkzeug==2.3.7
Jinja2==3.1.2
click==8.1.7
itsdangerous==2.1.2
MarkupSafe==2.1.3
psycopg2-binary==2.9.7
redis==5.0.1